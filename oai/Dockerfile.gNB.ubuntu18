FROM ubuntu:bionic AS builder

ARG version=2021.w28

ENV VERSION=$version

ARG NEEDED_GIT_PROXY
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Europe
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

#install developers pkg/repo
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get upgrade --yes && \
    DEBIAN_FRONTEND=noninteractive apt-get install --yes \
       #gcc needed for build_oai
       build-essential \
       psmisc \
       git \
       xxd \
       #unzip is needed for protobuf
       unzip

# In some network environments, GIT proxy is required
RUN /bin/bash -c "if [[ -v NEEDED_GIT_PROXY ]]; then git config --global http.proxy $NEEDED_GIT_PROXY; fi"

RUN apt-get update && apt-get install git
#create the WORKDIR
WORKDIR /oai-ran
RUN git clone https://gitlab.eurecom.fr/oai/openairinterface5g.git . 
RUN git checkout $VERSION

#run build_oai -I to get the builder image
RUN /bin/sh oaienv && \ 
    cd cmake_targets && \
    mkdir -p log && \
    ./build_oai -I -w USRP

#run build_oai to build the target image
RUN /bin/sh oaienv && \ 
    cd cmake_targets && \
    mkdir -p log && \
    ./build_oai --gNB --ninja -w USRP --verbose-ci

#debug
RUN ldconfig -v
RUN ldd /oai-ran/targets/bin/nr-softmodem.Rel15
RUN ls -lst /oai-ran/targets/bin
RUN ls -lst /oai-ran/cmake_targets/ran_build/build/*.so

#start from scratch for target executable
FROM ubuntu:bionic as oai
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Europe
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get upgrade --yes && \
    DEBIAN_FRONTEND=noninteractive apt-get install --yes \
        software-properties-common \
        libsctp1 \
        libnettle6 \
        libblas3 \
        libatlas3-base \
        libconfig9 \
        openssl \
        net-tools \
        dnsutils \
        iproute2 \
        iputils-ping \
        libyaml-0-2 && \
    # Install UHD driver from ettus ppa 
    # At time of writing, it is 3.14
    add-apt-repository ppa:ettusresearch/uhd --yes && \
    apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install --yes \
        python \
        libusb-1.0-0 \
        libuhd003 \
        uhd-host && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /opt/oai/bin
COPY --from=builder /oai-ran/targets/bin/nr-softmodem.Rel15 .

WORKDIR /usr/local/lib/
COPY --from=builder /oai-ran/targets/bin/liboai_eth_transpro.so.Rel15 .
COPY --from=builder /oai-ran/targets/bin/libtcp_bridge_oai.so.Rel15 .
COPY --from=builder /oai-ran/targets/bin/librfsimulator.so.Rel15 .
COPY --from=builder /oai-ran/targets/bin/liboai_usrpdevif.so.Rel15 .
COPY --from=builder /oai-ran/targets/bin/libcoding.so .
COPY --from=builder /oai-ran/targets/bin/libparams_libconfig.so .
COPY --from=builder /oai-ran/cmake_targets/ran_build/build/libdfts.so .
COPY --from=builder /oai-ran/cmake_targets/ran_build/build/libldpc.so .
COPY --from=builder /oai-ran/cmake_targets/ran_build/build/libldpc_optim.so .
COPY --from=builder /oai-ran/cmake_targets/ran_build/build/libldpc_optim8seg.so .
COPY --from=builder /oai-ran/cmake_targets/ran_build/build/libldpc_orig.so .

RUN /bin/bash -c "ln -s /usr/local/lib/liboai_eth_transpro.so.Rel15 /usr/local/lib/liboai_transpro.so"
RUN /bin/bash -c "ln -s /usr/local/lib/liboai_usrpdevif.so.Rel15 /usr/local/lib/liboai_device.so"
RUN /bin/bash -c "ln -s /usr/local/lib/librfsimulator.so.Rel15 /usr/local/lib/librfsimulator.so"
COPY --from=builder /usr/local/lib/libprotobuf-c.so.1 .

RUN ldconfig
#debug
#RUN ldd /opt/oai/bin/nr-softmodem.Rel15
#RUN ldd /usr/local/lib/liboai_eth_transpro.so.Rel15
#RUN ldd /usr/local/lib/libtcp_bridge_oai.so.Rel15
#RUN ldd /usr/local/lib/librfsimulator.so.Rel15
#RUN ldd /usr/local/lib/liboai_usrpdevif.so.Rel15
#RUN ldd /usr/local/lib/libcoding.so
#RUN ldd /usr/local/lib/libparams_libconfig.so
#RUN ldd /usr/local/lib/libdfts.so
#RUN ldd /usr/local/lib/libldpc.so
#RUN ldd /usr/local/lib/libldpc_optim.so
#RUN ldd /usr/local/lib/libldpc_optim8seg.so
#RUN ldd /usr/local/lib/libldpc_orig.so

# Copy the relevant configuration files for gNB
WORKDIR /opt/oai/etc
COPY --from=builder /oai-ran/ci-scripts/conf_files/gnb.* ./

WORKDIR /opt/oai
#EXPOSE 2152/udp  # S1U, GTP/UDP
#EXPOSE 22100/tcp # ?
#EXPOSE 36412/udp # S1C, SCTP/UDP
#EXPOSE 36422/udp # X2C, SCTP/UDP
#EXPOSE 50000/udp # IF5 / ORI (control)
#EXPOSE 50001/udp # IF5 / ECPRI (data)

#This is a patch to support IP extraction from interface names and host names
ENV IFACES="GNB_NG GNB_NGU"
ENV HOSTNAMES="AMF_NG "
ENV CONFIG_TEMPLATE="/opt/oai/etc/gnb.conf"
COPY gnb_entrypoint.sh /opt/oai/bin/entrypoint.sh

CMD ["/opt/oai/bin/nr-softmodem", "-O", "/opt/oai/etc/gnb.conf"]
ENTRYPOINT ["/opt/oai/bin/entrypoint.sh"]
